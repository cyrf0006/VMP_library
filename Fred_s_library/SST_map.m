function [thresh, S] = SST_map(mapData, latLims, lonLims, varargin)
    
% function SST_map(mapData, latLims, lonLims, varargin)
%  to be run in ~/PhD/Nitrates/SST/
% Used to create map from monthly SST climatologies generated by
% SST2map.m or SST2map_fromHDF.m
%
% without 'varargin', the script with generate a single average
% over all files provided, with 'clim' as extra parameter, the
% wcript will generate a figure for each input file in the list
%
% usage ex: 
% SST_map('sstMap.list', [45 52], [-70 -55])
% SST_map('sstMap.list', [47.5 49.5], [-70 -67.5])
% SST_map('sstMap_may-oct.list', [47.5 49.5], [-70 -67])
% SST_map('sstMap.list', [47.5 49.5], [-70 -67.5], 'clim')
% SST_map('sstMap_may-oct.list', [46.8 50], [-71 -66.8])  <------ a good one
% SST_map('sstMap_may-sept.list', [46.8 50], [-71 -66.8])  <------ a good one
% SST_map('sstMap_may-oct.list', [47.25 49.5], [-70.5 -67])  <------ a good one
% [thresh, S] = SST_map('sstMap_may-oct.list', [47.25 49.5], [-70.5 -67])  <------ the last one

% F. Cyr - August 2013
%  modified 2014-05-20 (New threshold on temperature from cumsum distrib)

% check varargin
if strcmp(varargin, 'clim')==1
    clim=1;
else
    clim=0;
end

    
fid = fopen(mapData);
C = textscan(fid, '%s', 'delimiter', '\n');
mapFiles = char(C{1});

noFiles = size(mapFiles,1);

if clim==1 % build a climatology
    disp('Climatology')
    for i = 1:noFiles

        fname = mapFiles(i, :);
        disp(fname)
        I = find(fname==' ');   
        fname(I) = [];
        
        load(fname)
        outfile = fname(1:end-4);
        
        figure(1)
        clf
        set(gcf,'PaperUnits','centimeters','PaperPosition',[1 1 15 12])
        m_proj('mercator', 'long',[lonLims(1) lonLims(2)],'lat',[latLims(1) latLims(2)]);
        m_grid('box','fancy')
        hold on
        %m_contourf(lonVec, latVec,TMat, [-2:.1:20], 'linestyle', 'none')     
        m_pcolor(lonVec, latVec,SST)     
        shading flat
        %m_gshhs_h('patch',[.5 .5 .5]); %coastlines
        m_gshhs_h('patch',[1 .9333 .6667]*.9); %coastlines (Beige)                               
        hold off
        
        colorbar
        caxis([0 16])
        
        
% $$$         % Cold anomaly position (for Fred's 3rd chapter):
% $$$         lon_min=-69.5452;
% $$$         lon_max=-69.4702;
% $$$         lat_min=48.1076;
% $$$         lat_max=48.1576;
% $$$         [lomi, lami] = m_ll2xy(lon_min,lat_min);
% $$$         [loma, lama] = m_ll2xy(lon_max,lat_max);
% $$$         
% $$$         rectangle('Position', [lomi lami loma-lomi lama-lami], 'linewidth', 2, 'edgecolor', 'r') 

        
        print('-dpng', [outfile '_coldAnomaly.png']);  
% $$$    set(gcf, 'renderer', 'painters'); % vectorial figure
% $$$    print('-depsc2', ['T_' outfile '.eps']);                                    

        pause(1)

    end

else % average all files
    disp('Single averaged figure')

    for i = 1:noFiles

        fname = mapFiles(i, :);
        disp(fname)
        I = find(fname==' ');   
        fname(I) = [];        
        load(fname)

        if i == 1
            SSTcube = nan(size(SST,1),size(SST,2),6);
        end

        SSTcube(:,:,i) = SST;
    end


    figure(1)
    clf
    set(gcf,'PaperUnits','centimeters','PaperPosition',[1 1 20 15])

    % *********************** Adjust_space.m ************************ %
    % Fields required by the function adjust_space.m. Please fill every
    % of the following and call "adjust_space" in the script whenever
    % you want. Do not touch four last fields
    ncol = 1; % no. subplot column
    nrow = 1; % no. subplot row
    dx = 0.05 ; % horiz. space between subplots
    dy = 0.05; % vert. space between subplots
    lefs = 0.15; % very left of figure
    rigs = 0.17; % very right of figure
    tops = 0.05; % top of figure
    bots = 0.1; % bottom of figure
    figw = (1-(lefs+rigs+(ncol-1)*dx))/ncol;
    figh = (1-(tops+bots+(nrow-1)*dy))/nrow;
    count_col = 1;
    count_row = 1;
    % *************************************************************** %


    m_proj('mercator', 'long',[lonLims(1) lonLims(2)],'lat',[latLims(1) latLims(2)]);
    m_grid('box','fancy')
    hold on
    m_contourf(lonVec, latVec,nanmean(SSTcube,3), [-2:.1:20], 'linestyle', 'none')     
    %m_pcolor(lonVec, latVec,nanmean(SSTcube,3))     
    shading flat
    %m_gshhs_h('patch',[.5 .5 .5]); %coastlines
    m_gshhs_h('patch',[1 .9333 .6667]*.9); %coastlines (Beige)                               
    hold off
    
    cb = colorbar
    caxis([2 12])    
    ylabel(cb,'T(^{\circ}C)', 'FontSize', 10)
    ylabel('Latitude')
    xlabel('Longitude')
    m_grid('box','fancy')

    drawnow
    cbPos = get(cb, 'pos');
    cbPos(1) = cbPos(1)+.02;
    cbPos(2) = cbPos(2)+.025;
    cbPos(3) = cbPos(3)*.5;
    cbPos(4) = cbPos(4)-.05;
    set(cb, 'pos', cbPos);
    
% $$$     % Cold anomaly position (for Fred's 3rd chapter):
% $$$     lon_min=-69.5452;
% $$$     lon_max=-69.4702;
% $$$     lat_min=48.1076;
% $$$     lat_max=48.1576;
% $$$     [lomi, lami] = m_ll2xy(lon_min,lat_min);
% $$$     [loma, lama] = m_ll2xy(lon_max,lat_max);   
% $$$     rectangle('Position', [lomi lami loma-lomi lama-lami], 'linewidth', 2, 'edgecolor', 'r') 
        
    % Original square
    lon_min=-69.65;
    lon_max=-69.35;
    lat_min=48.05;
    lat_max=48.2;
    [lomi, lami] = m_ll2xy(lon_min,lat_min);
    [loma, lama] = m_ll2xy(lon_max,lat_max);   
    %rectangle('Position', [lomi lami loma-lomi lama-lami], 'linewidth', 2, 'edgecolor', 'b') 
    
    % New version - 2014-05-21
    lon_min=-70;
    lon_max=-69;
    lat_min=48;
    lat_max=48.5;
    [lomi, lami] = m_ll2xy(lon_min,lat_min);
    [loma, lama] = m_ll2xy(lon_max,lat_max);   
    rectangle('Position', [lomi lami loma-lomi lama-lami], 'linewidth', 2, 'edgecolor', 'b')         
    
    % Restrict search area
    I = find(lonVec>= lon_min & lonVec <=lon_max);
    J = find(latVec>=lat_min & latVec<=lat_max);
    A = nanmean(SSTcube,3);
    A = A(J,I);
    
% $$$     %% T = 5.5 threshold
% $$$     m_contour(lonVec(I), latVec(J),A, [5.5 5.5], 'k', 'linewidth', 2) 
% $$$     
% $$$     %% Histogram threshold
% $$$     dc = .25; % class spacing
% $$$     [N, X] = hist(A(:), [2:dc:12]+dc/2);
% $$$     [Y, II] = max(N);
% $$$     thresh = X(II)-dc/2; % find the lowest edge of max class...   
% $$$     hold on
% $$$     m_contour(lonVec(I), latVec(J), A, [thresh thresh], 'k', 'linewidth', 2) 
    
    %% Cumulative distribution threshold
    dc = .1; % class spacing
    [N, X] = hist(A(:), [2:dc:12]+dc/2);
    CS = cumsum(N);
    [Y, II] = min(abs(CS./max(CS)-.05));
    thresh1 = X(II);
    [Y, II] = min(abs(CS./max(CS)-.1));
    thresh2 = X(II);
    [Y, II] = min(abs(CS./max(CS)-.15));
    thresh3 = X(II);
    hold on
    m_contour(lonVec(I), latVec(J), A, [thresh1 thresh2 thresh3], 'k', 'linewidth', 2) 
    %    m_contour(lonVec(I), latVec(J), A, [thresh thresh], 'k', 'linewidth', 2) 
    %m_contour(lonVec(I), latVec(J), A, [thresh thresh], 'k', 'linewidth', 2) 

    
    % Stat. 25
    lon_min=-69.5846;
    lon_max=-69.3145;
    lat_min=48.1431;
    lat_max=48.3229;
    [lomi, lami] = m_ll2xy(lon_min,lat_min);
    [loma, lama] = m_ll2xy(lon_max,lat_max);
    rectangle('Position', [lomi lami loma-lomi lama-lami],'linewidth', 1, 'edgecolor', 'k') 
    m_text(lon_max, lat_max, 'Stat. 25', 'vertical', 'bottom', 'horizontal','right', 'color', [0 0 0],'FontSize',8, 'FontWeight', 'bold')

    hold off
    
    adjust_space
    
% $$$     %% Histogram
% $$$     a2 = axes('position',[0.5 0.19 0.28 0.3]) ; % inset
% $$$     hist(A(:), [2:dc:12]+dc/2);
% $$$     
% $$$     % adjust ylabel to %
% $$$     ytickslab = get(gca, 'yticklabel')
% $$$     B = str2num(ytickslab);
% $$$     set(gca, 'yticklabel', round(B./length(A(:)).*100))
% $$$     ylabel('f(%)')
% $$$     xlabel('T(^{\circ}C)')
% $$$     hold on
% $$$     plot([thresh thresh], [0 max(B)], '--k')
% $$$     hold off
% $$$     xlim([min(X) max(X)])
    
    %% Cumulative distribution
    a2 = axes('position',[0.52 0.19 0.28 0.28]) ; % inset
    plot(X, CS./max(CS), 'k', 'linewidth', 2);
    hold on
    %    plot(X, CS./max(CS), '.k');
    plot([thresh1 thresh1], [0 1], '--k')
    plot([thresh2 thresh2], [0 1], '--k')
    plot([thresh3 thresh3], [0 1], '--k')
    ylabel('CDF')
    xlabel('T(^{\circ}C)')
    
    colormap(jet*.9)
    xlim([2 10])
    
    
    SST = nanmean(SSTcube,3);
    save SST_averaged.mat SST latVec lonVec
    print('-dpng', 'SST_averaged.png');  
    set(gcf, 'renderer', 'painters')
    print('-depsc2', 'SST_averaged.eps');  


end
 

%thresh
% Cold anomaly surface calculation
I = find(A<=thresh1);
S1 = length(I)*1.1; %km2
I = find(A<=thresh2);
S2 = length(I)*1.1; %km2
I = find(A<=thresh3);
S3 = length(I)*1.1; %km2
thresh = [thresh1 thresh2 thresh3];
S = [S1 S2 S3];

% $$$ keyboard
% $$$ 
% $$$ 
% $$$ % LSLE surface area
% $$$ lon_min=-69.75;
% $$$ lon_max=-67.25;
% $$$ lat_min=48.2;
% $$$ lat_max=49.6;
% $$$ [lomi, lami] = m_ll2xy(lon_min,lat_min);
% $$$ [loma, lama] = m_ll2xy(lon_max,lat_max);

%rectangle('Position', [lomi lami loma-lomi lama-lami], 'linewidth', 2, 'edgecolor', 'r') 
