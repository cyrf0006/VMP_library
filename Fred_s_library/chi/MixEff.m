function MixEff(chifile, epsfile)
    
% function MixEff(chifile, epsfile)
%
% usage ex:    
%
% Put in relation \chi and \epsilon in the mixing efficiency
% equation. 'MixEff_chi.mat' and 'MixEff_eps.mat' are generated by
% timedepth_chi.m and timedepth_eps.m
    
    
    
load(chifile);
load(epsfile);

dz = zvec_chi(2) - zvec_chi(1);


if size(eps_mat, 1) ~= size(chi_mat, 1)
    disp(['Deimension problem. Is chifile and epsfile are generated ' ...
          'the same ways?'])
    quit
end

dTdz = nan(size(T_mat));
for i = 1:size(eps_mat, 2);
    dTdz(:,i) = gradient(T_mat(:,i), dz);
end
I = find(dTdz==0);
dTdz(I) = NaN;


% ---- 2 ways ---- %
% --- > (1)
Y = N_mat.^2.*chi_mat;
X = 2*eps_mat.*dTdz.^2;

% $$$ for i = 1:size(Y, 2)
% $$$     I = find(~isnan(X(:,i))==1); % find non-NaNs
% $$$     Y(I(end-20:end), i) = NaN; % remove lasty bins
% $$$     X(I(end-20:end), i) = NaN;
% $$$ end


X = X(:);
Y = Y(:);

I = find(isnan(X)==1); % remove NaNs
X(I) = [];
Y(I) = [];
I = find(isnan(Y)==1);
X(I) = [];
Y(I) = [];
I = find(Y <= 0); % remove zeros or negatives
X(I) = [];
Y(I) = [];
I = find(X <= 0);
X(I) = [];
Y(I) = [];

[X, I] = sort(X); %sort
Y = Y(I);

p = polyfit(log10(X), log10(Y), 1); %polyfit

% cf. Sundfjord et al. 2007
a = 10.^p(2);
b = p(1); % b is the slope
          %[a b]
Y_fit = a.*(X.^b);
Y_fit2 = a.*(X.^0.2);
%Y_fit = 10.^b.*(X.*exp(m));
%Y_fit2 = 10.^b.*(X.*exp(log10(.2)));

figure(1)
clf
loglog(X, Y, 'k.')
hold on
%x = [1e-18 1e-5];
%y = 0.2*x;
%plot(x, y, 'r')
plot(X, Y_fit, 'b')
plot(X, Y_fit2, 'r')
xlabel('2 \epsilon (dT/dz)^2')
ylabel('N^2 \chi')
text(1e-7, 1e-16, 'y = ax^b')
text(1e-7, 1e-18, sprintf('a=%0.5g; b=%0.5g', a, b))


% --- > (2)
X = eps_mat./(N_mat.^2);
Y = chi_mat./(2*dTdz.^2);
X = X(:);
Y = Y(:);


I = find(isnan(X)==1); % remove NaNs
X(I) = [];
Y(I) = [];
I = find(isnan(Y)==1);
X(I) = [];
Y(I) = [];
I = find(Y <= 0); % remove zeros or negatives
X(I) = [];
Y(I) = [];
I = find(X <= 0);
X(I) = [];
Y(I) = [];

[X, I] = sort(X); %sort
Y = Y(I);

p = polyfit(log10(X), log10(Y), 1); %polyfit

% cf. Sundfjord et al. 2007
a = 10.^p(2);
b = p(1); % b is the slope
[a b]
Y_fit = a.*(X.^b);
%Y_fit = 10.^b.*(X.*exp(m));
%Y_fit2 = 10.^b.*(X.*exp(log10(.2)));

figure(2)
clf
loglog(X, Y, 'k.')
hold on
%x = [1e-18 1e-5];
%y = 0.2*x;
%plot(x, y, 'r')
plot(X, Y_fit, 'b')
%plot(X, Y_fit2, 'r')
xlabel('\epsilon N^{-2}')
ylabel('\chi /2(T''_z^2)')
text(1e-9, 1e0, 'y = ax^b')
text(1e-9, 1e-1, sprintf('a=%0.5g; b=%0.5g', a, b))


keyboard

