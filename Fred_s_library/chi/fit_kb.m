function [Chi, epsilon, likelihoodratio,likelihood,fitmaximum,f11] = fit_kb(k_obs,S_obs,graphing)%function [likelihoodratio,likelihood,fitmaximum,f11] = fit_kb(k_obs,S_obs,graphing)% This m-file (function) calculates the best-fit theoretical spectrum% to a given observed spectrum. It calls three other m-files, noise.m% C11.m, and batch_spec.m. It can be called from MATLAB command window.% %% INPUTS: k_obs -- This is a vector of k values from the%                  observed spectrum data The vector is x by 1 in size,%                  where x is the number of k values [1/m]%%	    S_obs --  This is a vector of observed spectral values from the spectral%   		        data. The vector is x by 1 in size, x as before.%%		graphing -- a flag value; set to 1 to plot the data, set to 0 %					  to suppress plots.%% OUTPUTS: output -> This is a vector containing the maximum likelihood value %			the first spot ( output(1) ), the Kb value that gives the maximum% 			likelihood in the second spot, and then the best-fit spectrum in spots%			3 to the end. These should be separated after calling this function.%% EXAMPLE on calling Fit_Kb :  [likelihoodratio,likelihood,fitmaximum,f11]=%								Fit_Kb(observed_k_values, observed_S_values)%% What Fred  understand....%% 'Xsix' is \Chi % 'epsilon_C11' is \epsilon% 'likelihoodratio' is P_batch/P_powerlaw: if log10(ratio) > 2, we are confident!% 'likelihood' is the (maximum) P calculated for the best fit%%% -------------------- few parameters -------------------------- %v_k=.000001;% viscosity of water; assumed known constantDt=.00000014; % Heat molec. diffus.dof_C11=2; %degrees of freedom for the C11 model% -------------------------------------------------------------- %nois=noise(k_obs); %get the noise at each value of k      ---> FC: noise must be adjusted% -------------------------- ROUGH SEARCH ----------------------- %maxk=3*max(k_obs); mink=max(k_obs)/200; range=(maxk-mink)/31;%divide range of k values into 30 partsloopwith=mink:range:maxk; %these are the k values for the rough search% rough search, returns y, a string of likelihood valuesy=[];for i=loopwith    S_theoretical = [batch_spec(i,k_obs,S_obs)+nois]';    y2=C11(2,k_obs,S_obs,S_theoretical); %call the C11 m-file for the cost function value    y=[y,y2]; % no need for counter this way -FCend%at this point, the maximum value in y is the rough estimate% where the true maximum is.x=find(y==max(y));rough_max=loopwith(x);C11_mid=x; % indice of rouh max and both sidesC11_leftside=x-1;C11_rightside=x+1;% -FC I = find(C11_leftside == 0);C11_leftside(I) = 1;I = find(C11_rightside>length(y));C11_rightside(I) = length(y);delta_k=(2*range)/sqrt(2*y(C11_mid)-y(C11_leftside)-y(C11_rightside));%delta_k is an estimate of curnature at the rough maximum, and indicates%a range over which the fine search could be done% ------------------------------------------------------------------ %% --------------------- FINE SEARCH -------------------------------- %finalrange=max(delta_k,range); %taking the max of these two values%decides which range to do the final search over. The maximum of the% two ensures the range will contain the true maximum.% As before, select a range of points to check for% the maximum at. this range is narrowed to the area around the rough_maxfine_bottomlimit=rough_max-finalrange;fine_toplimit=rough_max+finalrange;finerange=fine_toplimit-fine_bottomlimit; range_2=finerange/31; % as before, select a range of points to check forloopwith_2=fine_bottomlimit:range_2:fine_toplimit; % returns y_fine, a string of likelihood values around the rough maxy_fine=[];for i=loopwith_2    S_theoretical = [batch_spec(i,k_obs,S_obs)+nois]'; % (Eqn. 4)    y2=C11(2,k_obs,S_obs,S_theoretical); % (Eqn. 18)    y_fine=[y_fine,y2];end[likelihood, x] = max(y_fine); %MLE% fine_max=loopwith_2(x); %fine_max is the initial estimate of the true maximum --- FC : not used!%before fitting occurs to the curve later. fine_max allows the curve to be fit%in only the area of interest, around the maximum% --------------------------------------------------------------------- %% ------------------- BEST Kb, ERROR, EPSILON & CHI -------------------- %% x is index for best K_bx1 = x-7; %interval around maxx2 = x+7;if x1 <= 0    x1 = 1;end% - best k_bY = y_fine(x1:x2);X = loopwith_2(x1:x2); % nine points (k vector)X_dec = X(1):.01:X(end); % X decimated (many points)p = polyfit(X,Y,3);%fit a 5th order polynomial    --- FC: changed to 3rd orderder1 = polyder(p); %take the derivative of the polynomial pder2 = polyder(der1); %take second derivative of the polynomial       dY = polyval(der1, X_dec);%get the derivative polynom.ddY = polyval(der2, X_dec); [a, imax] = min(abs(dY)); % maximum at dY/dx = 0;fitmaximum = X_dec(imax); % best k_b!!% - Error on kb% estimation variance (curvature of best fit near maximum likelihood)kb_var = -1/ddY(imax); % variance (Eqn. 22)kb_sigma = sqrt(kb_var); % standard dev.delta_kb = 1.96*kb_sigma; % x 1.96 give approx. 95% conf. limitskbplus = fitmaximum+delta_kb;%upper bound on Kbkbminus =fitmaximum-delta_kb;%lower bound on Kb% - Epsilon and errorepsilon = ((fitmaximum*2*pi).^4)*v_k*(Dt^2);%best-fit Epsilonepsilonplus = ((kbplus*2*pi).^4)*v_k*(Dt^2);  %upper bound on Epsilonepsilonminus = ((kbminus*2*pi).^4)*v_k*(Dt^2); %lower bound on Epsilonepsplus = epsilonplus-epsilon; % error on epsilonepsminus = -epsilonminus+epsilon; % not really useful....             ------------> FC% - Batchelor Spectrum for best k_bf11=batch_spec(fitmaximum,k_obs,S_obs)+nois;     % - Chi calculationdk=k_obs(3)-k_obs(2);% $$$ N=(length(k_obs));% $$$ B=[];% $$$ for i=1:N% $$$     B=[B, (S_obs(i)*dk)];% $$$ end% $$$ %Xsix=6*Dt*(sum(B)-(nois(1)*N*dk));% $$$ Xsix=6*Dt*sum(B-nois*N.*dk);Chi = 6*Dt*sum((S_obs'-nois).*dk); % (Eqn. 9)Xsix = Chi;  % ---> FC (to match their graphing)% -------------------------------------------------------------------- %% ------------------- POWERLAW FIT TO SPETRUM ---------------------- %%  (for maximum likelihood ratio calculation, a measure of rejection)   logS=log(S_obs); %log base e of the observed spectrumlogK=log(k_obs); %log base e of the k values.coeffs_fit=polyfit(logK, logS,1); %coeffs_fit now contains the coefficients%of a first order fit to the logged data.Kfit=exp(logK*coeffs_fit(1)); %Kfit is now e to the values in%logK times the slope of the fit( which is in the first spot of %coeffs_fit, a 2x1 matrix)intercept=exp(coeffs_fit(2)); %intercept is now the y-intercept of%the polynomial fit to the observed spectrum.newspec=Kfit*intercept;  %contains the straight line fit to the spectrum.                         % --> FC: Here should we fit only to selected K_range, not the% whole spectrum?% likelihood of powerlaw              --> FCCalt11=C11(dof_C11,k_obs, S_obs, newspec);likelihoodratio=exp(likelihood-Calt11); % likelihoodratio% ------------------------------------------------------------------- %% $$$ % $$$ % ------------------------ FRED GRAPHING ---------------------------- %% $$$ figure(1)% $$$ clf% $$$ loglog(k_obs, S_obs)% $$$ hold on% $$$ plot(k_obs, nois, 'r')% $$$ plot(k_obs, f11, 'g')% $$$ hold off% $$$ ylabel('S(k) ( (deg C/m)^2/cpm )')% $$$ xlabel('k (cpm)')% $$$ legend('Sobs', 'noise', 'Batch. fit')% $$$ text(1.5,1e-5, ['\chi =' num2str(Chi) ' C^2/s'])% $$$ text(1.5,5e-6, ['\epsilon =' num2str(epsilon) ' W/kg'])% $$$ text(1.5,3e-6, ['\delta\epsilon =+(' num2str(epsplus) ')/-(' num2str(epsminus) ') W/kg'])% $$$ text(1.5,2e-6, ['kB=' num2str(fitmaximum) ' +/- ' num2str(delta_kb) ' cpm'])% $$$ text(1.5,1e-6, ['log(Likelihood Ratio) =' num2str(log10(exp(likelihood-Calt11)))])% $$$ pause% $$$ % ------------------------------------------------------------------- %% $$$ % $$$ % $$$ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%																					  %% GRAPHING SECTION															  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%if graphing==1         S_obs2=[];    for i=1:length(k)%make compatable with other variables        S_obs2=[S_obs2,S_obs(i)];    end            chipdf=fc_chi2pdf(1:length(k_obs),dof_C11);    N=length(k_obs);    g=S_obs2./(f11); %for general use    figure    %Figure 1 is for C11 information            subplot(221)    [H,P]=hist(dof_C11*g);    h=H./N;    bar(P,h)%makes a bar graph out of the residuals,in log space            % of observed/theoretical.        hold on    title([ 'Observed Spectrum' ])      ylabel('Relative frequency')    xlabel(['dof(' num2str(dof_C11) ')*observed/theoretical'])    t=0:25;    plot(fc_chi2pdf(t,2))%plots a Chi-squared with 2 dof on the bar graph    plot(fc_chi2pdf(t,4),':')%plots a CHi-squared with 4 dof on the bar graph                          %previous two plots done for comparison to the ersiduals    set(gca,'fontsize',4)    legend('\chi^2_2  ','\chi^2_4  ')    set(gca,'fontsize',10)            subplot(222)    r=fc_chi2rnd(dof_C11,1,length(k_obs));    g11=dof_C11.*(S_obs2./(f11));    g11=sort(g11);    pnums11=( ([1:length(k_obs)]'-.5)/length(k_obs));    plot(chi2inv(pnums11,2),g11,'+')    rsqr=corrcoef(chi2inv(pnums11,2),g11);    text(5,2, [ 'r^2 =' num2str(rsqr(1,2)) ])    xlabel('X Quantiles, Data')    ylabel(['Y Quantiles, \chi^2_' num2str(dof_C11) ''])    title(['Real Data, dof =? ,noise= ' num2str(nois(1)) ',\chi =' num2str(Xsix)])        subplot(223)%plots the likelihood values at the values in Kvalues    loglog(loopwith,y)    hold on    loglog(loopwith_2,y_fine)    plot(fitmaximum,likelihood,'.')%puts a point on the maximum    ylabel(['C11, dof= ' num2str(dof_C11)])    xlabel('Trial kB values (cpm)')            subplot(224)    loglog(k_obs,S_obs)    hold on    %nois(1);    loglog(k_obs,f11)%plot the best-fit theoretical spectrum    loglog(k_obs,newspec)%plot the straightline fit to the spectrum    ylabel('S(k) ( (deg C/m)^2/cpm )')    xlabel('Wave # k (cpm)')    text(1,.0000004, ['\chi =' num2str(Xsix) ' C^2/s'])    text(1,.00000004, ['\epsilon =' num2str(epsilonc11) ' W/kg'])    text(1,.0000000075, ['\delta\epsilon =+(' num2str(epsplus) ')/-(' num2str(epsminus) ') W/kg'])    text(1,.000000001, ['kB=' num2str(fitmaximum) ' +/- ' num2str(deltaKb) ' cpm'])    text(1,.0000000002, ['Likelihood Ratio =' num2str(exp(likelihood-Calt11)) ])    set(gca,'ylim',[.0000000001,1])    hold offend