%% quick_bench_XMP
% Generate plots and figures from a data file generated by an XMP instrument 
% using ODAS-RT. Intended for 'bench' testing and not for real ocean profiles.
%%
% <latex>\index{Type B!quick\_bench\_XMP}</latex>
%
%%% Syntax
%
%   quick_bench( fileName );
%
% * [fileName]  Name of an ODAS data file to process.  The data file is 
%                expected to be 1 to 2 minutes long.
%
%%% Description
%
% This is a function for the rapid generation of plots and figures
% from a data file generated by an XMP using ODAS-RT.
% It is intended for the quick evaluation of an instrument 'on the bench'.
%

% *Revision History*
%
% * 2006-04-15 (RGL)
% * 2006-05-24 (RGL) added conditional plotting for magnetometer
% * 2008-05-08 (RGL) added modifications for XMP. Function is poorly tested.
%   some parameters that are not easily passed or parsed
% * 2008-10-07 (FW) checked for errors. 
% * 2008-11-12 (RGL) added ADC coefficients, corrected fall-rate for Nasmyth estimates 
%   and added some new labels to the spectral plot.
% * 2008-11-13 (RGL) added Lou Goodman's vibration correction function
% * 2009-03-24 (RGL) reversed sign on thermistor temperature to reflect the
%   electronics.
% * 2010-01-14 (AWS) added odas v6 and higher support
% * 2011-09-01 (AWS) added documentation tags for matlab publishing
% * 2011-08-23 (RGL) works only wit V6 and higher data files.
% * 2012-04-11 (WID) changed inifile_with_instring calls to setupstr

function quick_bench_XMP(fname)
% ____________________________________________________________
% File opening etc.
% Check file name, check for a .mat file, and open the .p file if no *.mat
% file
% _________________________________________________________________
n_fft = 2048; % length of fft for fast channels, 2 seconds.
we_have_old_mat_file = 0;

% Ask the user for a file name if not provided as an input variable
dft_fname = get_latest_file;
if nargin<1
    fname = input(['Enter data file name (default: ' dft_fname '): '], 's');
    if isempty(fname), fname = dft_fname; end
end

% Look for the .p and .mat files, deal with problems
[fpath,N,E]=fileparts(fname);
if isempty(E)
   fname = [fname '.p'];
end
if ~exist(fname,'file')
   error('Unable to find file %s\n',fname);
end
if exist([N '.mat'],'file') % Then the mat-file already exist and we will
    % use it and go straight to the plotting.
    ['Loading file  = ' N '.mat']
    load([N '.mat']);
    we_have_old_mat_file = 1;
else
    variable_list = read_odas([N '.p']); % convert to a mat-file
    if isempty(variable_list)
        error('Could not convert data into a mat-file');
    end
    ['Loading file  = ' N '.mat']
    load([N '.mat']); % use the one we just converted
end

if header_version < 6
    error('This function only works with data file collected with ODAS-RT version 6 and later.')
end

cfg = setupstr(setupfilestr);
if isempty(setupstr(cfg, '', 'xmp'))
    error('This is not an XMP. Please run quick_look.m');
end

xmp_ser_num = [];
xmp_ser_num = instrument_serial_number_section;

% __________________________________________________________________
%
% This is where we get some information about the data sampling
if  (~we_have_old_mat_file), %We do not have a mat-file containing processed data.
    t_slow = (0:length(P)  -1)'/fs_slow; % make time vectors for plotting
    t_fast = (0:length(sh1)-1)'/fs_fast;

    Year  = header(2,4);
    Month = header(2,5);
    Day   = header(2,6);
    Hour  = header(2,7);
    Minute= header(2,8);
    
    %_____________________________________
    % Deconvolve the channels with pre-emphasis
    P_hres = deconvolve('pressure',      P, P_dP, fs_slow, setupfilestr, header_version, xmp_ser_num);
    T_hres = deconvolve('temperature', [], T_dT, fs_fast, setupfilestr, header_version, xmp_ser_num);
    
    SN = sprintf('%05d',floor(ch254(1))); % serial number of this XMP

    % Save the converted variables to the mat-file
    eval (['save ' N ' t_slow t_fast Year Month Day Hour Minute SN -append -v6'])
    flag = save_odas([N '.mat'], 'P',       P);       if (flag < 0), error(['Could not write P to '  N '.mat']), end
    flag = save_odas([N '.mat'], 'P_hres',  P_hres);  if (flag < 0), error(['Could not write P_hres to '  N '.mat']), end
    flag = save_odas([N '.mat'], 'T_hres', T_hres); if (flag < 0), error(['Could not write T_hres to ' N '.mat']), end
end % end of if (we_have_old_mat_file)

% This is the end of the section for deconvolution. This
% section was skipped if the mat-file already existed. If the mat-file is
% corrupted or has a bad conversion, then erase it and run this function
% again
% _______________________________________________________________________
% Make figures
% time series
Year_string = num2str(Year);
Month_string  = sprintf('%02d',Month);
Day_string    = sprintf('%02d',Day);
Hour_string   = sprintf('%02d',Hour);
Minute_string = sprintf('%02d',Minute);

title_string = {[ fix_underscore(N) '; '  Year_string '\_' Month_string '\_' Day_string ...
    ', ' Hour_string ':' Minute_string ' UTC'], ['XMP SN\_' SN]};
figure_file_name = ['XMP_' SN '_' N] ;


fig_handle=figure (1);clf
orient landscape

y_height = 0.12; % relative height of each subplot
y_decrement = y_height + 0.02; % the amount by which each subplot is lower than the previous one.
y_start = 0.8; % starting position for first subplot

h1=subplot('position',[0.13 y_start 0.8 y_height]);
plot(t_fast, [Ax Ay]); grid
legend('A_x' ,'A_y' ,'location','eastoutside')
title(title_string,'fontsize',14)
set(gca,'xticklabel',[])
set(gca,'fontsize',14)
y_start = y_start - y_decrement;

h2=subplot('position',[0.13 y_start 0.8 y_height]);
plot(t_fast, [sh1 sh2]);grid
set(gca,'xticklabel',[])
legend('Sh1','Sh2','location','eastoutside')
set(gca,'fontsize',14)
y_start = y_start - y_decrement;

h3=subplot('position',[0.13 y_start 0.8 y_height]);
plot(t_slow, Pitch); grid
legend('Pitch',  'location','eastoutside') 
set(gca,'xticklabel',[])
set(gca,'fontsize',14)
y_start = y_start - y_decrement;

h4=subplot('position',[0.13 y_start 0.8 y_height]);
plot(t_fast, T_dT);grid
legend('T\_dT','location','eastoutside')
set(gca,'xticklabel',[])
set(gca,'fontsize',14)
y_start = y_start - y_decrement;

h5=subplot('position',[0.13 y_start 0.8 y_height]);
plot(t_fast, T_hres, t_slow, T);grid
legend('T\_hres', 'T','location','eastoutside')
set(gca,'xticklabel',[])
set(gca,'fontsize',14)
y_start = y_start - y_decrement;

h6=subplot('position',[0.13 y_start 0.8 y_height]);
plot(t_slow, [ P P_dP P_hres]);grid
legend('P','P\_dP','P\_hres','location','eastoutside')
xlabel('\it t \rm [s]','fontsize',14)
set(gca,'fontsize',14)

position = get(h1,'position');
position = [position ; get(h2,'position')];
position = [position ; get(h3,'position')];
position = [position ; get(h4,'position')];
position = [position ; get(h5,'position')];
position = [position ; get(h6,'position')];

min_width = min(position(:,3));
position(:,3) = min_width;

set(h1,'position',position(1,:));
set(h2,'position',position(2,:));
set(h3,'position',position(3,:));
set(h4,'position',position(4,:));
set(h5,'position',position(5,:));
set(h6,'position',position(6,:));

orient landscape

eval (['print -depsc2 ' figure_file_name '_Fig_1'])
eval (['print -dpng '  figure_file_name '_Fig_1'])
saveas (fig_handle,    [figure_file_name '_Fig_1'], 'fig')

%----------------------------------------------------------------
%spectra
fig_handle=figure(2);clf

[P_Ax, F]  = csd_odas(Ax, Ax, n_fft, fs_fast, [], n_fft/2,'linear');
[P_Ay, F]  = csd_odas(Ay, Ay, n_fft, fs_fast, [], n_fft/2,'linear');
% start off with a given list of vectors and the corresponding legends
% and grow these two arrays depending on the presence of other variables
all_spectra = [P_Ax P_Ay ];
all_legends = {'A_x' 'A_y'};

[P_sh1, F] = csd_odas(sh1, sh1, n_fft, fs_fast, [], n_fft/2,'linear');
[P_sh2, F] = csd_odas(sh2, sh2, n_fft, fs_fast, [], n_fft/2,'linear');

all_spectra = [all_spectra P_sh1 P_sh2];
all_legends = [all_legends 'Sh1' 'Sh2' ];

[P_T, F] = csd_odas(T_dT, T_dT, n_fft, fs_fast, [], n_fft/2,'linear');
all_spectra = [all_spectra P_T];
all_legends = [all_legends 'T\_dT'];

% [P_ch15, F] = csd_odas(spare, spare, n_fft, fs_fast, [], n_fft/2,'linear');
% all_spectra = [all_spectra P_ch15];
% all_legends = [all_legends 'Ch\_15'];

[P_P, FF] = csd_odas(P_dP, P_dP, n_fft/8, fs_slow, [], n_fft/2/8,'linear');
all_legends = [all_legends 'P\_dP'];

h = loglog(F,all_spectra, FF, P_P);grid
legend(all_legends, 'location','eastoutside');

set(h(1),'linewidth', 1.5)
set(h(2),'linewidth', 1.5)
set(gca, 'ylim', [1e-4 1e1], 'xlim',[0.25 600])
set(gca,'fontsize',14)
ylabel('[counts^2 Hz^{-1}]')
xlabel('\it f \rm [Hz]')
title(title_string,'fontsize',14)
orient portrait

eval (['print -depsc2 ' figure_file_name '_Fig_2'])
eval (['print -dpng '  figure_file_name '_Fig_2'])
saveas (fig_handle,    [figure_file_name '_Fig_2'], 'fig')


